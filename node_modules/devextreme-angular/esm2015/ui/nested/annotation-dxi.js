/*!
 * devextreme-angular
 * Version: 19.2.6
 * Build date: Thu Jan 30 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import * as tslib_1 from "tslib";
/* tslint:disable:max-line-length */
/* tslint:disable:use-input-property-decorator */
import { Component, NgModule, Host, SkipSelf } from '@angular/core';
import { NestedOptionHost, } from 'devextreme-angular/core';
import { DxiChartAnnotationConfig } from './base/chart-annotation-config-dxi';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/core';
let DxiAnnotationComponent = class DxiAnnotationComponent extends DxiChartAnnotationConfig {
    constructor(parentOptionHost, optionHost) {
        super();
        parentOptionHost.setNestedOption(this);
        optionHost.setHost(this, this._fullOptionPath.bind(this));
    }
    get _optionPath() {
        return 'annotations';
    }
};
DxiAnnotationComponent.ɵfac = function DxiAnnotationComponent_Factory(t) { return new (t || DxiAnnotationComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost, 5), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost, 1)); };
DxiAnnotationComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DxiAnnotationComponent, selectors: [["dxi-annotation"]], inputs: { allowDragging: "allowDragging", argument: "argument", arrowLength: "arrowLength", arrowWidth: "arrowWidth", axis: "axis", border: "border", color: "color", customizeTooltip: "customizeTooltip", data: "data", description: "description", font: "font", height: "height", image: "image", name: "name", offsetX: "offsetX", offsetY: "offsetY", opacity: "opacity", paddingLeftRight: "paddingLeftRight", paddingTopBottom: "paddingTopBottom", series: "series", shadow: "shadow", template: "template", text: "text", textOverflow: "textOverflow", tooltipEnabled: "tooltipEnabled", tooltipTemplate: "tooltipTemplate", type: "type", value: "value", width: "width", wordWrap: "wordWrap", x: "x", y: "y" }, features: [ɵngcc0.ɵɵProvidersFeature([NestedOptionHost]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiAnnotationComponent_Template(rf, ctx) { }, styles: [""] });
DxiAnnotationComponent.ctorParameters = () => [
    { type: NestedOptionHost, decorators: [{ type: SkipSelf }, { type: Host }] },
    { type: NestedOptionHost, decorators: [{ type: Host }] }
];
DxiAnnotationComponent = tslib_1.__decorate([ tslib_1.__param(0, SkipSelf()), tslib_1.__param(0, Host()),
    tslib_1.__param(1, Host()),
    tslib_1.__metadata("design:paramtypes", [NestedOptionHost,
        NestedOptionHost])
], DxiAnnotationComponent);
export { DxiAnnotationComponent };
let DxiAnnotationModule = class DxiAnnotationModule {
};
DxiAnnotationModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DxiAnnotationModule });
DxiAnnotationModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DxiAnnotationModule_Factory(t) { return new (t || DxiAnnotationModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxiAnnotationComponent, [{
        type: Component,
        args: [{
                selector: 'dxi-annotation',
                template: '',
                providers: [NestedOptionHost],
                inputs: [
                    'allowDragging',
                    'argument',
                    'arrowLength',
                    'arrowWidth',
                    'axis',
                    'border',
                    'color',
                    'customizeTooltip',
                    'data',
                    'description',
                    'font',
                    'height',
                    'image',
                    'name',
                    'offsetX',
                    'offsetY',
                    'opacity',
                    'paddingLeftRight',
                    'paddingTopBottom',
                    'series',
                    'shadow',
                    'template',
                    'text',
                    'textOverflow',
                    'tooltipEnabled',
                    'tooltipTemplate',
                    'type',
                    'value',
                    'width',
                    'wordWrap',
                    'x',
                    'y'
                ],
                styles: ['']
            }]
    }], function () { return [{ type: ɵngcc1.NestedOptionHost, decorators: [{
                type: SkipSelf
            }, {
                type: Host
            }] }, { type: ɵngcc1.NestedOptionHost, decorators: [{
                type: Host
            }] }]; }, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxiAnnotationModule, { declarations: [DxiAnnotationComponent], exports: [DxiAnnotationComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxiAnnotationModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    DxiAnnotationComponent
                ],
                exports: [
                    DxiAnnotationComponent
                ]
            }]
    }], null, null); })();
export { DxiAnnotationModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ub3RhdGlvbi1keGkuanMiLCJzb3VyY2VzIjpbImRldmV4dHJlbWUtYW5ndWxhci91aS9uZXN0ZWQvYW5ub3RhdGlvbi1keGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0dBV0c7O0FBRUgsb0NBQW9DO0FBRXBDLGlEQUFpRDtBQUVqRCxPQUFPLEVBQ0gsU0FBUyxFQUNULFFBQVEsRUFDUixJQUFJLEVBQ0osUUFBUSxFQUNYLE1BQU0sZUFBZSxDQUFDO0FBTXZCLE9BQU8sRUFDSCxnQkFBZ0IsR0FDbkIsTUFBTSx5QkFBeUIsQ0FBQztBQUNqQyxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQzs7O0FBMkM5RSxJQUFhLHNCQUFzQixHQUFuQyxNQUFhLHNCQUF1QixTQUFRLHdCQUF3QjtJQU9oRSxZQUFnQyxnQkFBa0MsRUFDbEQsVUFBNEI7UUFDeEMsS0FBSyxFQUFFLENBQUM7UUFDUixnQkFBZ0IsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdkMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBVkQsSUFBYyxXQUFXO1FBQ3JCLE9BQU8sYUFBYSxDQUFDO0lBQ3pCLENBQUM7Q0FXSjs7dy9CQUFBOztZQVJxRCxnQkFBZ0IsdUJBQXJELFFBQVEsWUFBSSxJQUFJO1lBQ0QsZ0JBQWdCLHVCQUFuQyxJQUFJOztBQVJKLHNCQUFzQix1QkFBdUIsS0F4Q3pELFNBQVMsQ0FBQyxVQUNQLFFBQVEsRUFBRSxnQkFBZ0IsbkRBdUMxQixDQU9hLG1CQUFBLFFBQVEsRUFBRSxDQUFBLEVBQUUsbUJBQUEsSUFBSSxFQUFFLENBQUE7QUE3Qy9CLFFBQVEsRUFBRSxFQUFFLFVBRVosU0FBUywzQkE0Q0EsbUJBQUEsSUFBSSxFQUFFLENBQUE7Q0E1Q0osQ0FBQyxnQkFBZ0IsQ0FBQyxVQUM3QixNQUFNLEVBQUUsY0FDSixOQXlDOEMsZ0JBQWdCO0dBekMvQyxjQUNmLFRBeUN3QixnQkFBZ0I7QUF6QzlCLGNBQ1YsYUFBYSx4QkFnQ1Isc0JBQXNCLENBZWxDO2FBOUNPLFlBQVksaEJBK0JQLHNCQUFzQjtJQTlCM0IsTUFBTSxjQUNOLFFBQVEsY0FDUixPQUFPLHJEQXFEZixJQUFhLG1CQUFtQixHQUFoQyxNQUFhLG1CQUFtQjtDQUFJO1VBcEQ1QixrQkFBa0IsY0FDbEIsTUFBTSxjQUNOLGFBQWE7TUFDYixNQUFNLGNBQ04sUUFBUSxjQUNSLE9BQU8sY0FDUCxNQUFNLGNBQ04sU0FBUyxjQUNULFNBQVMsY0FDVCxTQUFTLDlJQTJDbUIsQ0FBdkIsbUJBQW1CLDRCQVIvQixRQUFRLENBQUMsVUFDUixZQUFZLEVBQUUsY0FDWixzQkFBc0IsVUFDdkIsVUFDRCxPQUFPLEVBQUU7T0F0Q0gsa0JBQWtCLGNBQ2xCLGtCQUFrQixjQUNsQixRQUFRLHBFQXFDWixzQkFBc0IsVUFDdkIsT0FDRixDQUFDLElBQ1csbUJBQW1CLENBQUk7WUF2QzVCLFFBQVE7U0FDUjtFQUFVLGNBQ1YsTUFBTSxjQUNOO01BQWMsY0FDZDtNQUFnQixjQUNoQixpQkFBaUI7SUFDakIsTUFBTSxjQUNOO0tBQU8sY0FDUCxPQUFPO0dBQ1AsVUFBVSxjQUNWLEdBQUc7WUFDSCxHQUFHLFVBQ047U0FuQ1EsRUFBRSxPQW9DZCxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzswQkEyQkY7U0FEYSxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIGRldmV4dHJlbWUtYW5ndWxhclxuICogVmVyc2lvbjogMTkuMi42XG4gKiBCdWlsZCBkYXRlOiBUaHUgSmFuIDMwIDIwMjBcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTIgLSAyMDIwIERldmVsb3BlciBFeHByZXNzIEluYy4gQUxMIFJJR0hUUyBSRVNFUlZFRFxuICpcbiAqIFRoaXMgc29mdHdhcmUgbWF5IGJlIG1vZGlmaWVkIGFuZCBkaXN0cmlidXRlZCB1bmRlciB0aGUgdGVybXNcbiAqIG9mIHRoZSBNSVQgbGljZW5zZS4gU2VlIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHByb2plY3QgZm9yIGRldGFpbHMuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL0RldkV4cHJlc3MvZGV2ZXh0cmVtZS1hbmd1bGFyXG4gKi9cblxuLyogdHNsaW50OmRpc2FibGU6bWF4LWxpbmUtbGVuZ3RoICovXHJcblxyXG4vKiB0c2xpbnQ6ZGlzYWJsZTp1c2UtaW5wdXQtcHJvcGVydHktZGVjb3JhdG9yICovXHJcblxyXG5pbXBvcnQge1xyXG4gICAgQ29tcG9uZW50LFxyXG4gICAgTmdNb2R1bGUsXHJcbiAgICBIb3N0LFxyXG4gICAgU2tpcFNlbGZcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcblxyXG5cclxuXHJcblxyXG5pbXBvcnQge1xyXG4gICAgTmVzdGVkT3B0aW9uSG9zdCxcclxufSBmcm9tICdkZXZleHRyZW1lLWFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IER4aUNoYXJ0QW5ub3RhdGlvbkNvbmZpZyB9IGZyb20gJy4vYmFzZS9jaGFydC1hbm5vdGF0aW9uLWNvbmZpZy1keGknO1xyXG5cclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdkeGktYW5ub3RhdGlvbicsXHJcbiAgICB0ZW1wbGF0ZTogJycsXHJcbiAgICBzdHlsZXM6IFsnJ10sXHJcbiAgICBwcm92aWRlcnM6IFtOZXN0ZWRPcHRpb25Ib3N0XSxcclxuICAgIGlucHV0czogW1xyXG4gICAgICAgICdhbGxvd0RyYWdnaW5nJyxcclxuICAgICAgICAnYXJndW1lbnQnLFxyXG4gICAgICAgICdhcnJvd0xlbmd0aCcsXHJcbiAgICAgICAgJ2Fycm93V2lkdGgnLFxyXG4gICAgICAgICdheGlzJyxcclxuICAgICAgICAnYm9yZGVyJyxcclxuICAgICAgICAnY29sb3InLFxyXG4gICAgICAgICdjdXN0b21pemVUb29sdGlwJyxcclxuICAgICAgICAnZGF0YScsXHJcbiAgICAgICAgJ2Rlc2NyaXB0aW9uJyxcclxuICAgICAgICAnZm9udCcsXHJcbiAgICAgICAgJ2hlaWdodCcsXHJcbiAgICAgICAgJ2ltYWdlJyxcclxuICAgICAgICAnbmFtZScsXHJcbiAgICAgICAgJ29mZnNldFgnLFxyXG4gICAgICAgICdvZmZzZXRZJyxcclxuICAgICAgICAnb3BhY2l0eScsXHJcbiAgICAgICAgJ3BhZGRpbmdMZWZ0UmlnaHQnLFxyXG4gICAgICAgICdwYWRkaW5nVG9wQm90dG9tJyxcclxuICAgICAgICAnc2VyaWVzJyxcclxuICAgICAgICAnc2hhZG93JyxcclxuICAgICAgICAndGVtcGxhdGUnLFxyXG4gICAgICAgICd0ZXh0JyxcclxuICAgICAgICAndGV4dE92ZXJmbG93JyxcclxuICAgICAgICAndG9vbHRpcEVuYWJsZWQnLFxyXG4gICAgICAgICd0b29sdGlwVGVtcGxhdGUnLFxyXG4gICAgICAgICd0eXBlJyxcclxuICAgICAgICAndmFsdWUnLFxyXG4gICAgICAgICd3aWR0aCcsXHJcbiAgICAgICAgJ3dvcmRXcmFwJyxcclxuICAgICAgICAneCcsXHJcbiAgICAgICAgJ3knXHJcbiAgICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEeGlBbm5vdGF0aW9uQ29tcG9uZW50IGV4dGVuZHMgRHhpQ2hhcnRBbm5vdGF0aW9uQ29uZmlnIHtcclxuXHJcbiAgICBwcm90ZWN0ZWQgZ2V0IF9vcHRpb25QYXRoKCkge1xyXG4gICAgICAgIHJldHVybiAnYW5ub3RhdGlvbnMnO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBjb25zdHJ1Y3RvcihAU2tpcFNlbGYoKSBASG9zdCgpIHBhcmVudE9wdGlvbkhvc3Q6IE5lc3RlZE9wdGlvbkhvc3QsXHJcbiAgICAgICAgICAgIEBIb3N0KCkgb3B0aW9uSG9zdDogTmVzdGVkT3B0aW9uSG9zdCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgcGFyZW50T3B0aW9uSG9zdC5zZXROZXN0ZWRPcHRpb24odGhpcyk7XHJcbiAgICAgICAgb3B0aW9uSG9zdC5zZXRIb3N0KHRoaXMsIHRoaXMuX2Z1bGxPcHRpb25QYXRoLmJpbmQodGhpcykpO1xyXG4gICAgfVxyXG5cclxuXHJcbn1cclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgZGVjbGFyYXRpb25zOiBbXHJcbiAgICBEeGlBbm5vdGF0aW9uQ29tcG9uZW50XHJcbiAgXSxcclxuICBleHBvcnRzOiBbXHJcbiAgICBEeGlBbm5vdGF0aW9uQ29tcG9uZW50XHJcbiAgXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIER4aUFubm90YXRpb25Nb2R1bGUgeyB9XHJcbiJdfQ==