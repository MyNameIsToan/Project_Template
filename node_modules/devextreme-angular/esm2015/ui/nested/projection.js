/*!
 * devextreme-angular
 * Version: 19.2.6
 * Build date: Thu Jan 30 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import * as tslib_1 from "tslib";
/* tslint:disable:max-line-length */
/* tslint:disable:use-input-property-decorator */
import { Component, NgModule, Host, SkipSelf } from '@angular/core';
import { NestedOptionHost, } from 'devextreme-angular/core';
import { DxoVectorMapProjectionConfig } from './base/vector-map-projection-config';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/core';
let DxoProjectionComponent = class DxoProjectionComponent extends DxoVectorMapProjectionConfig {
    constructor(parentOptionHost, optionHost) {
        super();
        parentOptionHost.setNestedOption(this);
        optionHost.setHost(this, this._fullOptionPath.bind(this));
    }
    get _optionPath() {
        return 'projection';
    }
    ngOnDestroy() {
        this._addRemovedOption(this._fullOptionPath().slice(0, -1));
    }
};
DxoProjectionComponent.ɵfac = function DxoProjectionComponent_Factory(t) { return new (t || DxoProjectionComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost, 5), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost, 1)); };
DxoProjectionComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DxoProjectionComponent, selectors: [["dxo-projection"]], inputs: { aspectRatio: "aspectRatio", from: "from", to: "to" }, features: [ɵngcc0.ɵɵProvidersFeature([NestedOptionHost]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoProjectionComponent_Template(rf, ctx) { }, styles: [""] });
DxoProjectionComponent.ctorParameters = () => [
    { type: NestedOptionHost, decorators: [{ type: SkipSelf }, { type: Host }] },
    { type: NestedOptionHost, decorators: [{ type: Host }] }
];
DxoProjectionComponent = tslib_1.__decorate([ tslib_1.__param(0, SkipSelf()), tslib_1.__param(0, Host()),
    tslib_1.__param(1, Host()),
    tslib_1.__metadata("design:paramtypes", [NestedOptionHost,
        NestedOptionHost])
], DxoProjectionComponent);
export { DxoProjectionComponent };
let DxoProjectionModule = class DxoProjectionModule {
};
DxoProjectionModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DxoProjectionModule });
DxoProjectionModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DxoProjectionModule_Factory(t) { return new (t || DxoProjectionModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxoProjectionComponent, [{
        type: Component,
        args: [{
                selector: 'dxo-projection',
                template: '',
                providers: [NestedOptionHost],
                inputs: [
                    'aspectRatio',
                    'from',
                    'to'
                ],
                styles: ['']
            }]
    }], function () { return [{ type: ɵngcc1.NestedOptionHost, decorators: [{
                type: SkipSelf
            }, {
                type: Host
            }] }, { type: ɵngcc1.NestedOptionHost, decorators: [{
                type: Host
            }] }]; }, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxoProjectionModule, { declarations: [DxoProjectionComponent], exports: [DxoProjectionComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxoProjectionModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    DxoProjectionComponent
                ],
                exports: [
                    DxoProjectionComponent
                ]
            }]
    }], null, null); })();
export { DxoProjectionModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvamVjdGlvbi5qcyIsInNvdXJjZXMiOlsiZGV2ZXh0cmVtZS1hbmd1bGFyL3VpL25lc3RlZC9wcm9qZWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztHQVdHOztBQUVILG9DQUFvQztBQUVwQyxpREFBaUQ7QUFFakQsT0FBTyxFQUNILFNBQVMsRUFFVCxRQUFRLEVBQ1IsSUFBSSxFQUNKLFFBQVEsRUFDWCxNQUFNLGVBQWUsQ0FBQztBQU12QixPQUFPLEVBQ0gsZ0JBQWdCLEdBQ25CLE1BQU0seUJBQXlCLENBQUM7QUFDakMsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0scUNBQXFDLENBQUM7OztBQWNuRixJQUFhLHNCQUFzQixHQUFuQyxNQUFhLHNCQUF1QixTQUFRLDRCQUE0QjtJQU9wRSxZQUFnQyxnQkFBa0MsRUFDbEQsVUFBNEI7UUFDeEMsS0FBSyxFQUFFLENBQUM7UUFDUixnQkFBZ0IsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdkMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBVkQsSUFBYyxXQUFXO1FBQ3JCLE9BQU8sWUFBWSxDQUFDO0lBQ3hCLENBQUM7SUFXRCxXQUFXO1FBQ1AsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRSxDQUFDO0NBRUo7OzBYQUFBOztZQVpxRCxnQkFBZ0IsdUJBQXJELFFBQVEsWUFBSSxJQUFJO1lBQ0QsZ0JBQWdCLHVCQUFuQyxJQUFJOztBQVJKLHNCQUFzQix1QkFBdUIsS0FYekQsU0FBUyxDQUFDLFVBQ1AsUUFBUSxFQUFFLGdCQUFnQixuREFVMUIsQ0FPYSxtQkFBQSxRQUFRLEVBQUUsQ0FBQSxFQUFFLG1CQUFBLElBQUksRUFBRSxDQUFBO0FBaEIvQixRQUFRLEVBQUUsRUFBRSxVQUVaLFNBQVMsM0JBZUEsbUJBQUEsSUFBSSxFQUFFLENBQUE7Q0FmSixDQUFDLGdCQUFnQixDQUFDLFVBQzdCLE1BQU0sRUFBRSxjQUNKLE5BWThDLGdCQUFnQjtDQVpqRCxjQUNiLE1BQU0sYkFZa0IsZ0JBQWdCO1FBWHhDLElBQUksVUFDUCxuQkFFUSxzQkFBc0IsQ0FtQmxDO2FBM0JZLEVBQUUsT0FPZCxDQUFDLGRBQ1csc0JBQXNCO0FBNkJuQyxJQUFhLG1CQUFtQixHQUFoQyxNQUFhLG1CQUFtQjtDQUFJOztFQUFBLENBQXZCLG1CQUFtQiw0QkFSL0IsUUFBUSxDQUFDLFVBQ1IsWUFBWSxFQUFFLGNBQ1osc0JBQXNCLFVBQ3ZCLFVBQ0QsT0FBTyxFQUFFO1dBQ1Asc0JBQXNCLFVBQ3ZCLE9BQ0YsQ0FBQyxJQUNXLG1CQUFtQixDQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzBCQUNwQztTQURhLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogZGV2ZXh0cmVtZS1hbmd1bGFyXG4gKiBWZXJzaW9uOiAxOS4yLjZcbiAqIEJ1aWxkIGRhdGU6IFRodSBKYW4gMzAgMjAyMFxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMiAtIDIwMjAgRGV2ZWxvcGVyIEV4cHJlc3MgSW5jLiBBTEwgUklHSFRTIFJFU0VSVkVEXG4gKlxuICogVGhpcyBzb2Z0d2FyZSBtYXkgYmUgbW9kaWZpZWQgYW5kIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSB0ZXJtc1xuICogb2YgdGhlIE1JVCBsaWNlbnNlLiBTZWUgdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBvZiB0aGUgcHJvamVjdCBmb3IgZGV0YWlscy5cbiAqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vRGV2RXhwcmVzcy9kZXZleHRyZW1lLWFuZ3VsYXJcbiAqL1xuXG4vKiB0c2xpbnQ6ZGlzYWJsZTptYXgtbGluZS1sZW5ndGggKi9cclxuXHJcbi8qIHRzbGludDpkaXNhYmxlOnVzZS1pbnB1dC1wcm9wZXJ0eS1kZWNvcmF0b3IgKi9cclxuXHJcbmltcG9ydCB7XHJcbiAgICBDb21wb25lbnQsXHJcbiAgICBPbkRlc3Ryb3ksXHJcbiAgICBOZ01vZHVsZSxcclxuICAgIEhvc3QsXHJcbiAgICBTa2lwU2VsZlxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuXHJcblxyXG5cclxuXHJcbmltcG9ydCB7XHJcbiAgICBOZXN0ZWRPcHRpb25Ib3N0LFxyXG59IGZyb20gJ2RldmV4dHJlbWUtYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRHhvVmVjdG9yTWFwUHJvamVjdGlvbkNvbmZpZyB9IGZyb20gJy4vYmFzZS92ZWN0b3ItbWFwLXByb2plY3Rpb24tY29uZmlnJztcclxuXHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnZHhvLXByb2plY3Rpb24nLFxyXG4gICAgdGVtcGxhdGU6ICcnLFxyXG4gICAgc3R5bGVzOiBbJyddLFxyXG4gICAgcHJvdmlkZXJzOiBbTmVzdGVkT3B0aW9uSG9zdF0sXHJcbiAgICBpbnB1dHM6IFtcclxuICAgICAgICAnYXNwZWN0UmF0aW8nLFxyXG4gICAgICAgICdmcm9tJyxcclxuICAgICAgICAndG8nXHJcbiAgICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEeG9Qcm9qZWN0aW9uQ29tcG9uZW50IGV4dGVuZHMgRHhvVmVjdG9yTWFwUHJvamVjdGlvbkNvbmZpZyBpbXBsZW1lbnRzIE9uRGVzdHJveSAge1xyXG5cclxuICAgIHByb3RlY3RlZCBnZXQgX29wdGlvblBhdGgoKSB7XHJcbiAgICAgICAgcmV0dXJuICdwcm9qZWN0aW9uJztcclxuICAgIH1cclxuXHJcblxyXG4gICAgY29uc3RydWN0b3IoQFNraXBTZWxmKCkgQEhvc3QoKSBwYXJlbnRPcHRpb25Ib3N0OiBOZXN0ZWRPcHRpb25Ib3N0LFxyXG4gICAgICAgICAgICBASG9zdCgpIG9wdGlvbkhvc3Q6IE5lc3RlZE9wdGlvbkhvc3QpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHBhcmVudE9wdGlvbkhvc3Quc2V0TmVzdGVkT3B0aW9uKHRoaXMpO1xyXG4gICAgICAgIG9wdGlvbkhvc3Quc2V0SG9zdCh0aGlzLCB0aGlzLl9mdWxsT3B0aW9uUGF0aC5iaW5kKHRoaXMpKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgdGhpcy5fYWRkUmVtb3ZlZE9wdGlvbih0aGlzLl9mdWxsT3B0aW9uUGF0aCgpLnNsaWNlKDAsIC0xKSk7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGRlY2xhcmF0aW9uczogW1xyXG4gICAgRHhvUHJvamVjdGlvbkNvbXBvbmVudFxyXG4gIF0sXHJcbiAgZXhwb3J0czogW1xyXG4gICAgRHhvUHJvamVjdGlvbkNvbXBvbmVudFxyXG4gIF0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEeG9Qcm9qZWN0aW9uTW9kdWxlIHsgfVxyXG4iXX0=