/*!
 * devextreme-angular
 * Version: 19.2.6
 * Build date: Thu Jan 30 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import * as tslib_1 from "tslib";
/* tslint:disable:max-line-length */
/* tslint:disable:use-input-property-decorator */
import { Component, NgModule, Host, SkipSelf } from '@angular/core';
import { NestedOptionHost, } from 'devextreme-angular/core';
import { DxiVizScaleBreak } from './base/viz-scale-break-dxi';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/core';
var DxiBreakComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DxiBreakComponent, _super);
    function DxiBreakComponent(parentOptionHost, optionHost) {
        var _this = _super.call(this) || this;
        parentOptionHost.setNestedOption(_this);
        optionHost.setHost(_this, _this._fullOptionPath.bind(_this));
        return _this;
    }
    Object.defineProperty(DxiBreakComponent.prototype, "_optionPath", {
        get: function () {
            return 'breaks';
        },
        enumerable: true,
        configurable: true
    });
    DxiBreakComponent.ctorParameters = function () { return [
        { type: NestedOptionHost, decorators: [{ type: SkipSelf }, { type: Host }] },
        { type: NestedOptionHost, decorators: [{ type: Host }] }
    ]; };
    DxiBreakComponent = tslib_1.__decorate([ tslib_1.__param(0, SkipSelf()), tslib_1.__param(0, Host()),
        tslib_1.__param(1, Host()),
        tslib_1.__metadata("design:paramtypes", [NestedOptionHost,
            NestedOptionHost])
    ], DxiBreakComponent);
DxiBreakComponent.ɵfac = function DxiBreakComponent_Factory(t) { return new (t || DxiBreakComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost, 5), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost, 1)); };
DxiBreakComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DxiBreakComponent, selectors: [["dxi-break"]], inputs: { endValue: "endValue", startValue: "startValue" }, features: [ɵngcc0.ɵɵProvidersFeature([NestedOptionHost]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiBreakComponent_Template(rf, ctx) { }, styles: [""] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxiBreakComponent, [{
        type: Component,
        args: [{
                selector: 'dxi-break',
                template: '',
                providers: [NestedOptionHost],
                inputs: [
                    'endValue',
                    'startValue'
                ],
                styles: ['']
            }]
    }], function () { return [{ type: ɵngcc1.NestedOptionHost, decorators: [{
                type: SkipSelf
            }, {
                type: Host
            }] }, { type: ɵngcc1.NestedOptionHost, decorators: [{
                type: Host
            }] }]; }, null); })();
    return DxiBreakComponent;
}(DxiVizScaleBreak));
export { DxiBreakComponent };
var DxiBreakModule = /** @class */ (function () {
    function DxiBreakModule() {
    }
DxiBreakModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DxiBreakModule });
DxiBreakModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DxiBreakModule_Factory(t) { return new (t || DxiBreakModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxiBreakModule, { declarations: [DxiBreakComponent], exports: [DxiBreakComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxiBreakModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    DxiBreakComponent
                ],
                exports: [
                    DxiBreakComponent
                ]
            }]
    }], function () { return []; }, null); })();
    return DxiBreakModule;
}());
export { DxiBreakModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWstZHhpLmpzIiwic291cmNlcyI6WyJkZXZleHRyZW1lLWFuZ3VsYXIvdWkvbmVzdGVkL2JyZWFrLWR4aS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7R0FXRzs7QUFFSCxvQ0FBb0M7QUFFcEMsaURBQWlEO0FBRWpELE9BQU8sRUFDSCxTQUFTLEVBQ1QsUUFBUSxFQUNSLElBQUksRUFDSixRQUFRLEVBQ1gsTUFBTSxlQUFlLENBQUM7QUFNdkIsT0FBTyxFQUNILGdCQUFnQixHQUNuQixNQUFNLHlCQUF5QixDQUFDO0FBQ2pDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDOzs7QUFhOUQ7SUFBdUMsNkNBQWdCO0lBT25ELDJCQUFnQyxnQkFBa0MsRUFDbEQsVUFBNEI7UUFENUMsWUFFSSxpQkFBTyxTQUdWO1FBRkcsZ0JBQWdCLENBQUMsZUFBZSxDQUFDLEtBQUksQ0FBQyxDQUFDO1FBQ3ZDLFVBQVUsQ0FBQyxPQUFPLENBQUMsS0FBSSxFQUFFLEtBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUksQ0FBQyxDQUFDLENBQUM7O0lBQzlELENBQUM7SUFWRCxzQkFBYywwQ0FBVzthQUF6QjtZQUNJLE9BQU8sUUFBUSxDQUFDO1FBQ3BCLENBQUM7OztPQUFBOztnQkFHaUQsZ0JBQWdCLHVCQUFyRCxRQUFRLFlBQUksSUFBSTtnQkFDRCxnQkFBZ0IsdUJBQW5DLElBQUk7O0lBUkosaUJBQWlCLHVCQUF1QixTQVZwRCxTQUFTLENBQUMsY0FDUCxRQUFRLEVBQUUsV0FBVyx0REFTakIsQ0FPUyxtQkFBQSxRQUFRLEVBQUUsQ0FBQSxFQUFFLG1CQUFBLElBQUksRUFBRSxDQUFBO09BZi9CLFFBQVEsRUFBRSxFQUFFLGNBRVosekJBY1MsbUJBQUEsSUFBSSxFQUFFLENBQUE7TUFkTixFQUFFLENBQUMsZ0JBQWdCLENBQUMsY0FDN0IsTUFBTSxFQUFFLGtCQUNKLGpCQVc4QyxnQkFBZ0I7U0FYcEQsa0JBQ1YsZkFXd0IsZ0JBQWdCO1FBWDVCLGNBQ2YsZkFFUSxpQkFBaUIsQ0FlN0I7a0JBdEJZLEVBQUUsV0FNZCxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztrQ0FpQkY7SUFEQSx3QkFBQztDQUFBLEFBZkQsQ0FBdUMsZ0JBQWdCLEdBZXREO1NBZlksaUJBQWlCO0FBeUI5QjtJQUFBO0lBQThCLENBQUM7SUFBbEIsY0FBYyxnQ0FSMUIsUUFBUSxDQUFDO0FBQ1IsWUFBWSxFQUFFLGtCQUNaLGlCQUFpQixjQUNsQixjQUNELE9BQU8sRUFBRSxrQkFDUCxpQkFBaUIsY0FDbEI7VUFDRixDQUFDLFFBQ1csY0FBYyxDQUFJOzs7Ozs7Ozs7OztnREFDL0I7SUFEOEIscUJBQUM7Q0FBQSxBQUEvQixJQUErQjtTQUFsQixjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBkZXZleHRyZW1lLWFuZ3VsYXJcbiAqIFZlcnNpb246IDE5LjIuNlxuICogQnVpbGQgZGF0ZTogVGh1IEphbiAzMCAyMDIwXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEyIC0gMjAyMCBEZXZlbG9wZXIgRXhwcmVzcyBJbmMuIEFMTCBSSUdIVFMgUkVTRVJWRURcbiAqXG4gKiBUaGlzIHNvZnR3YXJlIG1heSBiZSBtb2RpZmllZCBhbmQgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIHRlcm1zXG4gKiBvZiB0aGUgTUlUIGxpY2Vuc2UuIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBwcm9qZWN0IGZvciBkZXRhaWxzLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9EZXZFeHByZXNzL2RldmV4dHJlbWUtYW5ndWxhclxuICovXG5cbi8qIHRzbGludDpkaXNhYmxlOm1heC1saW5lLWxlbmd0aCAqL1xyXG5cclxuLyogdHNsaW50OmRpc2FibGU6dXNlLWlucHV0LXByb3BlcnR5LWRlY29yYXRvciAqL1xyXG5cclxuaW1wb3J0IHtcclxuICAgIENvbXBvbmVudCxcclxuICAgIE5nTW9kdWxlLFxyXG4gICAgSG9zdCxcclxuICAgIFNraXBTZWxmXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5cclxuXHJcblxyXG5cclxuaW1wb3J0IHtcclxuICAgIE5lc3RlZE9wdGlvbkhvc3QsXHJcbn0gZnJvbSAnZGV2ZXh0cmVtZS1hbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEeGlWaXpTY2FsZUJyZWFrIH0gZnJvbSAnLi9iYXNlL3Zpei1zY2FsZS1icmVhay1keGknO1xyXG5cclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdkeGktYnJlYWsnLFxyXG4gICAgdGVtcGxhdGU6ICcnLFxyXG4gICAgc3R5bGVzOiBbJyddLFxyXG4gICAgcHJvdmlkZXJzOiBbTmVzdGVkT3B0aW9uSG9zdF0sXHJcbiAgICBpbnB1dHM6IFtcclxuICAgICAgICAnZW5kVmFsdWUnLFxyXG4gICAgICAgICdzdGFydFZhbHVlJ1xyXG4gICAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgRHhpQnJlYWtDb21wb25lbnQgZXh0ZW5kcyBEeGlWaXpTY2FsZUJyZWFrIHtcclxuXHJcbiAgICBwcm90ZWN0ZWQgZ2V0IF9vcHRpb25QYXRoKCkge1xyXG4gICAgICAgIHJldHVybiAnYnJlYWtzJztcclxuICAgIH1cclxuXHJcblxyXG4gICAgY29uc3RydWN0b3IoQFNraXBTZWxmKCkgQEhvc3QoKSBwYXJlbnRPcHRpb25Ib3N0OiBOZXN0ZWRPcHRpb25Ib3N0LFxyXG4gICAgICAgICAgICBASG9zdCgpIG9wdGlvbkhvc3Q6IE5lc3RlZE9wdGlvbkhvc3QpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHBhcmVudE9wdGlvbkhvc3Quc2V0TmVzdGVkT3B0aW9uKHRoaXMpO1xyXG4gICAgICAgIG9wdGlvbkhvc3Quc2V0SG9zdCh0aGlzLCB0aGlzLl9mdWxsT3B0aW9uUGF0aC5iaW5kKHRoaXMpKTtcclxuICAgIH1cclxuXHJcblxyXG59XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGRlY2xhcmF0aW9uczogW1xyXG4gICAgRHhpQnJlYWtDb21wb25lbnRcclxuICBdLFxyXG4gIGV4cG9ydHM6IFtcclxuICAgIER4aUJyZWFrQ29tcG9uZW50XHJcbiAgXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIER4aUJyZWFrTW9kdWxlIHsgfVxyXG4iXX0=