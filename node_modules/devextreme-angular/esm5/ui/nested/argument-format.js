/*!
 * devextreme-angular
 * Version: 19.2.6
 * Build date: Thu Jan 30 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import * as tslib_1 from "tslib";
/* tslint:disable:max-line-length */
/* tslint:disable:use-input-property-decorator */
import { Component, NgModule, Host, SkipSelf } from '@angular/core';
import { NestedOptionHost, } from 'devextreme-angular/core';
import { DxoFormat } from './base/format';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/core';
var DxoArgumentFormatComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DxoArgumentFormatComponent, _super);
    function DxoArgumentFormatComponent(parentOptionHost, optionHost) {
        var _this = _super.call(this) || this;
        parentOptionHost.setNestedOption(_this);
        optionHost.setHost(_this, _this._fullOptionPath.bind(_this));
        return _this;
    }
    Object.defineProperty(DxoArgumentFormatComponent.prototype, "_optionPath", {
        get: function () {
            return 'argumentFormat';
        },
        enumerable: true,
        configurable: true
    });
    DxoArgumentFormatComponent.prototype.ngOnDestroy = function () {
        this._addRemovedOption(this._fullOptionPath().slice(0, -1));
    };
    DxoArgumentFormatComponent.ctorParameters = function () { return [
        { type: NestedOptionHost, decorators: [{ type: SkipSelf }, { type: Host }] },
        { type: NestedOptionHost, decorators: [{ type: Host }] }
    ]; };
    DxoArgumentFormatComponent = tslib_1.__decorate([ tslib_1.__param(0, SkipSelf()), tslib_1.__param(0, Host()),
        tslib_1.__param(1, Host()),
        tslib_1.__metadata("design:paramtypes", [NestedOptionHost,
            NestedOptionHost])
    ], DxoArgumentFormatComponent);
DxoArgumentFormatComponent.ɵfac = function DxoArgumentFormatComponent_Factory(t) { return new (t || DxoArgumentFormatComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost, 5), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost, 1)); };
DxoArgumentFormatComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DxoArgumentFormatComponent, selectors: [["dxo-argument-format"]], inputs: { currency: "currency", formatter: "formatter", parser: "parser", precision: "precision", type: "type" }, features: [ɵngcc0.ɵɵProvidersFeature([NestedOptionHost]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoArgumentFormatComponent_Template(rf, ctx) { }, styles: [""] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxoArgumentFormatComponent, [{
        type: Component,
        args: [{
                selector: 'dxo-argument-format',
                template: '',
                providers: [NestedOptionHost],
                inputs: [
                    'currency',
                    'formatter',
                    'parser',
                    'precision',
                    'type'
                ],
                styles: ['']
            }]
    }], function () { return [{ type: ɵngcc1.NestedOptionHost, decorators: [{
                type: SkipSelf
            }, {
                type: Host
            }] }, { type: ɵngcc1.NestedOptionHost, decorators: [{
                type: Host
            }] }]; }, null); })();
    return DxoArgumentFormatComponent;
}(DxoFormat));
export { DxoArgumentFormatComponent };
var DxoArgumentFormatModule = /** @class */ (function () {
    function DxoArgumentFormatModule() {
    }
DxoArgumentFormatModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DxoArgumentFormatModule });
DxoArgumentFormatModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DxoArgumentFormatModule_Factory(t) { return new (t || DxoArgumentFormatModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxoArgumentFormatModule, { declarations: [DxoArgumentFormatComponent], exports: [DxoArgumentFormatComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxoArgumentFormatModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    DxoArgumentFormatComponent
                ],
                exports: [
                    DxoArgumentFormatComponent
                ]
            }]
    }], function () { return []; }, null); })();
    return DxoArgumentFormatModule;
}());
export { DxoArgumentFormatModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJndW1lbnQtZm9ybWF0LmpzIiwic291cmNlcyI6WyJkZXZleHRyZW1lLWFuZ3VsYXIvdWkvbmVzdGVkL2FyZ3VtZW50LWZvcm1hdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7R0FXRzs7QUFFSCxvQ0FBb0M7QUFFcEMsaURBQWlEO0FBRWpELE9BQU8sRUFDSCxTQUFTLEVBRVQsUUFBUSxFQUNSLElBQUksRUFDSixRQUFRLEVBQ1gsTUFBTSxlQUFlLENBQUM7QUFNdkIsT0FBTyxFQUNILGdCQUFnQixHQUNuQixNQUFNLHlCQUF5QixDQUFDO0FBQ2pDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7OztBQWdCMUM7SUFBZ0Qsc0RBQVM7SUFPckQsb0NBQWdDLGdCQUFrQyxFQUNsRCxVQUE0QjtRQUQ1QyxZQUVJLGlCQUFPLFNBR1Y7UUFGRyxnQkFBZ0IsQ0FBQyxlQUFlLENBQUMsS0FBSSxDQUFDLENBQUM7UUFDdkMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFJLEVBQUUsS0FBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLENBQUMsQ0FBQzs7SUFDOUQsQ0FBQztJQVZELHNCQUFjLG1EQUFXO2FBQXpCO1lBQ0ksT0FBTyxnQkFBZ0IsQ0FBQztRQUM1QixDQUFDOzs7T0FBQTtJQVdELGdEQUFXLEdBQVg7UUFDSSxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7O2dCQVZpRCxnQkFBZ0IsdUJBQXJELFFBQVEsWUFBSSxJQUFJO2dCQUNELGdCQUFnQix1QkFBbkMsSUFBSTs7SUFSSiwwQkFBMEIsdUJBQXVCLFNBYjdELFNBQVMsQ0FBQyxjQUNQLFFBQVEsRUFBRSwzQ0FZTixDQU9TLG1CQUFBLFFBQVEsRUFBRSxDQUFBLEVBQUUsbUJBQUEsSUFBSSxFQUFFLENBQUE7R0FuQkEsY0FDL0IsUUFBUSxFQUFFLEVBQUUsckJBbUJILG1CQUFBLElBQUksRUFBRSxDQUFBO09BakJmLFNBQVMsRUFBRSxDQUFDLGdCQUFnQixDQUFDLGNBQzdCLE1BQU0sRUFBRSxUQWUwQyxnQkFBZ0I7U0FkOUQsVUFBVSxQQWVjLGdCQUFnQjtNQWR4QyxXQUFXLGtCQUNYLDVCQUtLLDBCQUEwQixDQW1CdEM7T0F4QmUsa0JBQ1IsV0FBVyxrQkFDWCxNQUFNLGNBQ1QsdUJBUlEsRUFBRSxXQVNkLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2tDQXFCRjtJQURBLGlDQUFDO0NBQUEsQUFuQkQsQ0FBZ0QsU0FBUyxHQW1CeEQ7U0FuQlksMEJBQTBCO0FBNkJ2QztJQUFBO0lBQXVDLENBQUM7SUFBM0IsdUJBQXVCLGdDQVJuQyxRQUFRLENBQUMsY0FDUjtHQUFZLEVBQUUsa0JBQ1osMEJBQTBCLGNBQzNCLGNBQ0QsT0FBTyxFQUFFLGtCQUNQLDBCQUEwQixjQUMzQixXQUNGLENBQUM7Q0FDVyx1QkFBdUIsQ0FBSTs7Ozs7Ozs7Ozs7Z0RBQ3hDO0lBRHVDLDhCQUFDO0NBQUEsQUFBeEMsSUFBd0M7U0FBM0IsdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBkZXZleHRyZW1lLWFuZ3VsYXJcbiAqIFZlcnNpb246IDE5LjIuNlxuICogQnVpbGQgZGF0ZTogVGh1IEphbiAzMCAyMDIwXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEyIC0gMjAyMCBEZXZlbG9wZXIgRXhwcmVzcyBJbmMuIEFMTCBSSUdIVFMgUkVTRVJWRURcbiAqXG4gKiBUaGlzIHNvZnR3YXJlIG1heSBiZSBtb2RpZmllZCBhbmQgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIHRlcm1zXG4gKiBvZiB0aGUgTUlUIGxpY2Vuc2UuIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBwcm9qZWN0IGZvciBkZXRhaWxzLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9EZXZFeHByZXNzL2RldmV4dHJlbWUtYW5ndWxhclxuICovXG5cbi8qIHRzbGludDpkaXNhYmxlOm1heC1saW5lLWxlbmd0aCAqL1xyXG5cclxuLyogdHNsaW50OmRpc2FibGU6dXNlLWlucHV0LXByb3BlcnR5LWRlY29yYXRvciAqL1xyXG5cclxuaW1wb3J0IHtcclxuICAgIENvbXBvbmVudCxcclxuICAgIE9uRGVzdHJveSxcclxuICAgIE5nTW9kdWxlLFxyXG4gICAgSG9zdCxcclxuICAgIFNraXBTZWxmXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5cclxuXHJcblxyXG5cclxuaW1wb3J0IHtcclxuICAgIE5lc3RlZE9wdGlvbkhvc3QsXHJcbn0gZnJvbSAnZGV2ZXh0cmVtZS1hbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEeG9Gb3JtYXQgfSBmcm9tICcuL2Jhc2UvZm9ybWF0JztcclxuXHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnZHhvLWFyZ3VtZW50LWZvcm1hdCcsXHJcbiAgICB0ZW1wbGF0ZTogJycsXHJcbiAgICBzdHlsZXM6IFsnJ10sXHJcbiAgICBwcm92aWRlcnM6IFtOZXN0ZWRPcHRpb25Ib3N0XSxcclxuICAgIGlucHV0czogW1xyXG4gICAgICAgICdjdXJyZW5jeScsXHJcbiAgICAgICAgJ2Zvcm1hdHRlcicsXHJcbiAgICAgICAgJ3BhcnNlcicsXHJcbiAgICAgICAgJ3ByZWNpc2lvbicsXHJcbiAgICAgICAgJ3R5cGUnXHJcbiAgICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEeG9Bcmd1bWVudEZvcm1hdENvbXBvbmVudCBleHRlbmRzIER4b0Zvcm1hdCBpbXBsZW1lbnRzIE9uRGVzdHJveSAge1xyXG5cclxuICAgIHByb3RlY3RlZCBnZXQgX29wdGlvblBhdGgoKSB7XHJcbiAgICAgICAgcmV0dXJuICdhcmd1bWVudEZvcm1hdCc7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGNvbnN0cnVjdG9yKEBTa2lwU2VsZigpIEBIb3N0KCkgcGFyZW50T3B0aW9uSG9zdDogTmVzdGVkT3B0aW9uSG9zdCxcclxuICAgICAgICAgICAgQEhvc3QoKSBvcHRpb25Ib3N0OiBOZXN0ZWRPcHRpb25Ib3N0KSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICBwYXJlbnRPcHRpb25Ib3N0LnNldE5lc3RlZE9wdGlvbih0aGlzKTtcclxuICAgICAgICBvcHRpb25Ib3N0LnNldEhvc3QodGhpcywgdGhpcy5fZnVsbE9wdGlvblBhdGguYmluZCh0aGlzKSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIG5nT25EZXN0cm95KCkge1xyXG4gICAgICAgIHRoaXMuX2FkZFJlbW92ZWRPcHRpb24odGhpcy5fZnVsbE9wdGlvblBhdGgoKS5zbGljZSgwLCAtMSkpO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtcclxuICAgIER4b0FyZ3VtZW50Rm9ybWF0Q29tcG9uZW50XHJcbiAgXSxcclxuICBleHBvcnRzOiBbXHJcbiAgICBEeG9Bcmd1bWVudEZvcm1hdENvbXBvbmVudFxyXG4gIF0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEeG9Bcmd1bWVudEZvcm1hdE1vZHVsZSB7IH1cclxuIl19