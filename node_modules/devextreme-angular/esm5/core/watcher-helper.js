/*!
 * devextreme-angular
 * Version: 19.2.6
 * Build date: Thu Jan 30 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import * as commonUtils from 'devextreme/core/utils/common';
import * as ɵngcc0 from '@angular/core';
var WatcherHelper = /** @class */ (function () {
    function WatcherHelper() {
        this._watchers = [];
    }
    WatcherHelper.prototype.getWatchMethod = function () {
        var _this = this;
        var watchMethod = function (valueGetter, valueChangeCallback, options) {
            var oldValue = valueGetter();
            options = options || {};
            if (!options.skipImmediate) {
                valueChangeCallback(oldValue);
            }
            var watcher = function () {
                var newValue = valueGetter();
                if (_this._isDifferentValues(oldValue, newValue, options.deep)) {
                    valueChangeCallback(newValue);
                    oldValue = newValue;
                }
            };
            _this._watchers.push(watcher);
            return function () {
                var index = _this._watchers.indexOf(watcher);
                if (index !== -1) {
                    _this._watchers.splice(index, 1);
                }
            };
        };
        return watchMethod;
    };
    WatcherHelper.prototype._isDifferentValues = function (oldValue, newValue, deepCheck) {
        var comparableNewValue = this._toComparable(newValue);
        var comparableOldValue = this._toComparable(oldValue);
        var isObjectValues = comparableNewValue instanceof Object && comparableOldValue instanceof Object;
        if (deepCheck && isObjectValues) {
            return this._checkObjectsFields(newValue, oldValue);
        }
        return comparableNewValue !== comparableOldValue;
    };
    WatcherHelper.prototype._toComparable = function (value) {
        if (value instanceof Date) {
            return value.getTime();
        }
        return value;
    };
    WatcherHelper.prototype._checkObjectsFields = function (checkingFromObject, checkingToObject) {
        for (var field in checkingFromObject) {
            var oldValue = this._toComparable(checkingFromObject[field]);
            var newValue = this._toComparable(checkingToObject[field]);
            var isEqualObjects = false;
            if (typeof oldValue === 'object' && typeof newValue === 'object') {
                isEqualObjects = commonUtils.equalByValue(oldValue, newValue);
            }
            if (oldValue !== newValue && !isEqualObjects) {
                return true;
            }
        }
    };
    WatcherHelper.prototype.checkWatchers = function () {
        var e_1, _a;
        try {
            for (var _b = tslib_1.__values(this._watchers), _c = _b.next(); !_c.done; _c = _b.next()) {
                var watcher = _c.value;
                watcher();
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
WatcherHelper.ɵfac = function WatcherHelper_Factory(t) { return new (t || WatcherHelper)(); };
WatcherHelper.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: WatcherHelper, factory: function (t) { return WatcherHelper.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(WatcherHelper, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return WatcherHelper;
}());
export { WatcherHelper };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2F0Y2hlci1oZWxwZXIuanMiLCJzb3VyY2VzIjpbImRldmV4dHJlbWUtYW5ndWxhci9jb3JlL3dhdGNoZXItaGVscGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztHQVdHOztBQUVILE9BQU8sRUFDSCxVQUFVLEVBQ2IsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxLQUFLLFdBQVcsTUFBTSw4QkFBOEIsQ0FBQzs7QUFHNUQ7SUFEQTtRQUVZLGNBQVMsR0FBVSxFQUFFLENBQUM7SUF5RWxDLENBQUM7SUF2RUcsc0NBQWMsR0FBZDtRQUFBLGlCQThCQztRQTdCRyxJQUFJLFdBQVcsR0FBRyxVQUFDLFdBQVcsRUFBRSxtQkFBbUIsRUFBRSxPQUFPO1lBQ3hELElBQUksUUFBUSxHQUFHLFdBQVcsRUFBRSxDQUFDO1lBQzdCLE9BQU8sR0FBRyxPQUFPLElBQUksRUFBRSxDQUFDO1lBRXhCLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFO2dCQUN4QixtQkFBbUIsQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUNqQztZQUVELElBQUksT0FBTyxHQUFHO2dCQUNWLElBQUksUUFBUSxHQUFHLFdBQVcsRUFBRSxDQUFDO2dCQUU3QixJQUFJLEtBQUksQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtvQkFDM0QsbUJBQW1CLENBQUMsUUFBUSxDQUFDLENBQUM7b0JBQzlCLFFBQVEsR0FBRyxRQUFRLENBQUM7aUJBQ3ZCO1lBQ0wsQ0FBQyxDQUFDO1lBRUYsS0FBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFN0IsT0FBTztnQkFDSCxJQUFJLEtBQUssR0FBRyxLQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFFNUMsSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDLEVBQUU7b0JBQ2QsS0FBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO2lCQUNuQztZQUNMLENBQUMsQ0FBQztRQUNOLENBQUMsQ0FBQztRQUVGLE9BQU8sV0FBVyxDQUFDO0lBQ3ZCLENBQUM7SUFFTywwQ0FBa0IsR0FBMUIsVUFBMkIsUUFBYSxFQUFFLFFBQWEsRUFBRSxTQUFrQjtRQUN2RSxJQUFJLGtCQUFrQixHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdEQsSUFBSSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3RELElBQUksY0FBYyxHQUFHLGtCQUFrQixZQUFZLE1BQU0sSUFBSSxrQkFBa0IsWUFBWSxNQUFNLENBQUM7UUFFbEcsSUFBSSxTQUFTLElBQUksY0FBYyxFQUFFO1lBQzdCLE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztTQUN2RDtRQUNELE9BQU8sa0JBQWtCLEtBQUssa0JBQWtCLENBQUM7SUFDckQsQ0FBQztJQUVPLHFDQUFhLEdBQXJCLFVBQXNCLEtBQUs7UUFDdkIsSUFBSSxLQUFLLFlBQVksSUFBSSxFQUFFO1lBQ3ZCLE9BQU8sS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQzFCO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQztJQUVPLDJDQUFtQixHQUEzQixVQUE0QixrQkFBMEIsRUFBRSxnQkFBd0I7UUFDNUUsS0FBSyxJQUFJLEtBQUssSUFBSSxrQkFBa0IsRUFBRTtZQUNsQyxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDN0QsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQzNELElBQUksY0FBYyxHQUFHLEtBQUssQ0FBQztZQUUzQixJQUFJLE9BQU8sUUFBUSxLQUFLLFFBQVEsSUFBSSxPQUFPLFFBQVEsS0FBSyxRQUFRLEVBQUU7Z0JBQzlELGNBQWMsR0FBRyxXQUFXLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQzthQUNqRTtZQUNELElBQUksUUFBUSxLQUFLLFFBQVEsSUFBSSxDQUFDLGNBQWMsRUFBRTtnQkFDMUMsT0FBTyxJQUFJLENBQUM7YUFDZjtTQUNKO0lBQ0wsQ0FBQztJQUVELHFDQUFhLEdBQWI7OztZQUNHLEtBQW9CLElBQUEsS0FBQSxpQkFBQSxJQUFJLENBQUMsU0FBUyxDQUFBLGdCQUFBLDRCQUFFO2dCQUEvQixJQUFJLE9BQU8sV0FBQTtnQkFDWCxPQUFPLEVBQUUsQ0FBQzthQUNiOzs7Ozs7Ozs7SUFDTCxDQUFDLENBQ0w7SUExRWEsYUFBYSxnQ0FEekIsVUFBVSxFQUFFLFFBQ0EsYUFBYSxDQTBFekI7Ozs7Z0RBQ0Q7SUFEQSxvQkFBQztDQUFBLEFBMUVELElBMEVDO1NBMUVZLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIGRldmV4dHJlbWUtYW5ndWxhclxuICogVmVyc2lvbjogMTkuMi42XG4gKiBCdWlsZCBkYXRlOiBUaHUgSmFuIDMwIDIwMjBcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTIgLSAyMDIwIERldmVsb3BlciBFeHByZXNzIEluYy4gQUxMIFJJR0hUUyBSRVNFUlZFRFxuICpcbiAqIFRoaXMgc29mdHdhcmUgbWF5IGJlIG1vZGlmaWVkIGFuZCBkaXN0cmlidXRlZCB1bmRlciB0aGUgdGVybXNcbiAqIG9mIHRoZSBNSVQgbGljZW5zZS4gU2VlIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHByb2plY3QgZm9yIGRldGFpbHMuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL0RldkV4cHJlc3MvZGV2ZXh0cmVtZS1hbmd1bGFyXG4gKi9cblxuaW1wb3J0IHtcclxuICAgIEluamVjdGFibGVcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCAqIGFzIGNvbW1vblV0aWxzIGZyb20gJ2RldmV4dHJlbWUvY29yZS91dGlscy9jb21tb24nO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgV2F0Y2hlckhlbHBlciB7XHJcbiAgICBwcml2YXRlIF93YXRjaGVyczogYW55W10gPSBbXTtcclxuXHJcbiAgICBnZXRXYXRjaE1ldGhvZCgpIHtcclxuICAgICAgICBsZXQgd2F0Y2hNZXRob2QgPSAodmFsdWVHZXR0ZXIsIHZhbHVlQ2hhbmdlQ2FsbGJhY2ssIG9wdGlvbnMpID0+IHtcclxuICAgICAgICAgICAgbGV0IG9sZFZhbHVlID0gdmFsdWVHZXR0ZXIoKTtcclxuICAgICAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcblxyXG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMuc2tpcEltbWVkaWF0ZSkge1xyXG4gICAgICAgICAgICAgICAgdmFsdWVDaGFuZ2VDYWxsYmFjayhvbGRWYWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCB3YXRjaGVyID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IG5ld1ZhbHVlID0gdmFsdWVHZXR0ZXIoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5faXNEaWZmZXJlbnRWYWx1ZXMob2xkVmFsdWUsIG5ld1ZhbHVlLCBvcHRpb25zLmRlZXApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVDaGFuZ2VDYWxsYmFjayhuZXdWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgb2xkVmFsdWUgPSBuZXdWYWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3dhdGNoZXJzLnB1c2god2F0Y2hlcik7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5fd2F0Y2hlcnMuaW5kZXhPZih3YXRjaGVyKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fd2F0Y2hlcnMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4gd2F0Y2hNZXRob2Q7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfaXNEaWZmZXJlbnRWYWx1ZXMob2xkVmFsdWU6IGFueSwgbmV3VmFsdWU6IGFueSwgZGVlcENoZWNrOiBib29sZWFuKSB7XHJcbiAgICAgICAgbGV0IGNvbXBhcmFibGVOZXdWYWx1ZSA9IHRoaXMuX3RvQ29tcGFyYWJsZShuZXdWYWx1ZSk7XHJcbiAgICAgICAgbGV0IGNvbXBhcmFibGVPbGRWYWx1ZSA9IHRoaXMuX3RvQ29tcGFyYWJsZShvbGRWYWx1ZSk7XHJcbiAgICAgICAgbGV0IGlzT2JqZWN0VmFsdWVzID0gY29tcGFyYWJsZU5ld1ZhbHVlIGluc3RhbmNlb2YgT2JqZWN0ICYmIGNvbXBhcmFibGVPbGRWYWx1ZSBpbnN0YW5jZW9mIE9iamVjdDtcclxuXHJcbiAgICAgICAgaWYgKGRlZXBDaGVjayAmJiBpc09iamVjdFZhbHVlcykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY2hlY2tPYmplY3RzRmllbGRzKG5ld1ZhbHVlLCBvbGRWYWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjb21wYXJhYmxlTmV3VmFsdWUgIT09IGNvbXBhcmFibGVPbGRWYWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF90b0NvbXBhcmFibGUodmFsdWUpIHtcclxuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBEYXRlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5nZXRUaW1lKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfY2hlY2tPYmplY3RzRmllbGRzKGNoZWNraW5nRnJvbU9iamVjdDogT2JqZWN0LCBjaGVja2luZ1RvT2JqZWN0OiBPYmplY3QpIHtcclxuICAgICAgICBmb3IgKGxldCBmaWVsZCBpbiBjaGVja2luZ0Zyb21PYmplY3QpIHtcclxuICAgICAgICAgICAgbGV0IG9sZFZhbHVlID0gdGhpcy5fdG9Db21wYXJhYmxlKGNoZWNraW5nRnJvbU9iamVjdFtmaWVsZF0pO1xyXG4gICAgICAgICAgICBsZXQgbmV3VmFsdWUgPSB0aGlzLl90b0NvbXBhcmFibGUoY2hlY2tpbmdUb09iamVjdFtmaWVsZF0pO1xyXG4gICAgICAgICAgICBsZXQgaXNFcXVhbE9iamVjdHMgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2xkVmFsdWUgPT09ICdvYmplY3QnICYmIHR5cGVvZiBuZXdWYWx1ZSA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgICAgIGlzRXF1YWxPYmplY3RzID0gY29tbW9uVXRpbHMuZXF1YWxCeVZhbHVlKG9sZFZhbHVlLCBuZXdWYWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKG9sZFZhbHVlICE9PSBuZXdWYWx1ZSAmJiAhaXNFcXVhbE9iamVjdHMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNoZWNrV2F0Y2hlcnMoKSB7XHJcbiAgICAgICBmb3IgKGxldCB3YXRjaGVyIG9mIHRoaXMuX3dhdGNoZXJzKSB7XHJcbiAgICAgICAgICAgIHdhdGNoZXIoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19